import 'dart:async';
import 'dart:io';

import 'package:device_info_plus/device_info_plus.dart';
import 'package:ecommerce_app/core/data/datasources/supabase_client.dart';
import 'package:ecommerce_app/features/auth/bloc/auth_event.dart';
import 'package:ecommerce_app/features/auth/bloc/auth_state.dart';
import 'package:ecommerce_app/features/auth/service/session_manager.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class AuthBloc extends Bloc<AuthEvent, AuthenState> {
  AuthBloc() : super(const AuthenState.initial()) {
    on<LoginEvent>(_onLogin);
    on<LogoutEvent>(_onLogout);
    on<RestoreSessionEvent>(_onRestore);
    on<RegisterEvent>(_onRegister);
    on<HandleAuthCallbackEvent>(_onHandleAuthCallback);
    on<ResendVerificationEvent>(_onResendVerification);
    on<ResetPasswordEvent>(_onResetPassword);
    on<UpdatePasswordEvent>(_onUpdatePassword);
    on<CheckEmailVerificationEvent>(_onCheckEmailVerification);
    on<LoginWithGoogle>(_loginWithGoogle);
  }

  // ==================== DEVICE & FCM TOKEN MANAGEMENT ====================

  /// L·∫•y Device ID duy nh·∫•t cho m·ªói thi·∫øt b·ªã
  Future<String> _getDeviceId() async {
    try {
      final deviceInfo = DeviceInfoPlugin();
      if (Platform.isAndroid) {
        final androidInfo = await deviceInfo.androidInfo;
        return androidInfo.id;
      } else if (Platform.isIOS) {
        final iosInfo = await deviceInfo.iosInfo;
        return iosInfo.identifierForVendor ??
            "unknown_ios_${DateTime.now().millisecondsSinceEpoch}";
      } else {
        return "unknown_device_${DateTime.now().millisecondsSinceEpoch}";
      }
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y Device ID: $e");
      return "error_device_${DateTime.now().millisecondsSinceEpoch}";
    }
  }

  /// L·∫•y t√™n thi·∫øt b·ªã ƒë·ªÉ hi·ªÉn th·ªã
  Future<String> _getDeviceName() async {
    try {
      final deviceInfo = DeviceInfoPlugin();
      if (Platform.isAndroid) {
        final androidInfo = await deviceInfo.androidInfo;
        return "${androidInfo.brand} ${androidInfo.model}";
      } else if (Platform.isIOS) {
        final iosInfo = await deviceInfo.iosInfo;
        return "${iosInfo.name} (${iosInfo.model})";
      }
      return "Unknown Device";
    } catch (e) {
      return "Unknown Device";
    }
  }

  /// L·∫•y platform (Android/iOS)
  String _getPlatform() {
    if (Platform.isAndroid) return 'android';
    if (Platform.isIOS) return 'ios';
    return 'unknown';
  }

  /// L∆∞u FCM token v√†o database khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
  Future<void> _saveFcmToken(String userId) async {
    try {
      final client = SupabaseConfig.client;
      final fcmToken = await FirebaseMessaging.instance.getToken();
      final deviceId = await _getDeviceId();
      final deviceName = await _getDeviceName();
      final platform = _getPlatform();

      if (fcmToken == null || fcmToken.isEmpty) {
        print("‚ö†Ô∏è FCM token null ho·∫∑c r·ªóng, b·ªè qua l∆∞u token");
        return;
      }

      // Upsert token v√†o database
      await client.from('user_devices').upsert(
        {
          'user_id': userId,
          'fcm_token': fcmToken,
          'device_id': deviceId,
          'device_name': deviceName,
          'platform': platform,
          'is_active': true,
          'last_active_at': DateTime.now().toIso8601String(),
        },
        onConflict: 'user_id,device_id', // Tr√°nh tr√πng l·∫∑p
      );

      print("‚úÖ ƒê√£ l∆∞u FCM token th√†nh c√¥ng");
      print("   üì± Device: $deviceName ($deviceId)");
      print("   üîë Token: ${fcmToken.substring(0, 20)}...");
    } catch (e) {
      print("‚ùå L·ªói khi l∆∞u FCM token: $e");
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn flow ƒëƒÉng nh·∫≠p
    }
  }

  /// V√¥ hi·ªáu h√≥a FCM token khi ƒëƒÉng xu·∫•t
  Future<void> _deactivateFcmToken(String userId) async {
    try {
      final client = SupabaseConfig.client;
      final deviceId = await _getDeviceId();

      await client
          .from('user_devices')
          .update({'is_active': false})
          .eq('user_id', userId)
          .eq('device_id', deviceId);

      print("üö™ ƒê√£ v√¥ hi·ªáu h√≥a FCM token khi logout");
    } catch (e) {
      print("‚ùå L·ªói khi deactivate FCM token: $e");
      // Kh√¥ng throw error
    }
  }

  /// X√≥a t·∫•t c·∫£ token c≈© c·ªßa user tr√™n thi·∫øt b·ªã n√†y (cleanup)
  Future<void> _cleanupOldTokens(String userId) async {
    try {
      final client = SupabaseConfig.client;
      final deviceId = await _getDeviceId();

      // L·∫•y danh s√°ch token c≈© (inactive ho·∫∑c qu√° 30 ng√†y kh√¥ng active)
      final oldDate =
          DateTime.now().subtract(const Duration(days: 30)).toIso8601String();

      await client
          .from('user_devices')
          .delete()
          .eq('user_id', userId)
          .eq('device_id', deviceId)
          .or('is_active.eq.false,last_active_at.lt.$oldDate');

      print("üßπ ƒê√£ d·ªçn d·∫πp token c≈©");
    } catch (e) {
      print("‚ö†Ô∏è L·ªói khi cleanup token: $e");
    }
  }

  // ==================== AUTHENTICATION HANDLERS ====================

  /// ƒêƒÇNG K√ù T√ÄI KHO·∫¢N M·ªöI
  Future<void> _onRegister(
      RegisterEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      if (!_validateRegistrationData(event.email, event.password)) {
        emit(const AuthenState.error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.'));
        return;
      }

      final client = SupabaseConfig.client;
      final response = await client.auth.signUp(
        email: event.email.trim().toLowerCase(),
        password: event.password,
        emailRedirectTo: 'ecommerceapp://auth/callback',
        data: {
          'registration_source': 'mobile_app',
          'registration_timestamp': DateTime.now().toIso8601String(),
          'app_name': 'Ecommerce App',
          'full_name': event.email.split('@')[0],
        },
      );

      final user = response.user;
      if (user == null) {
        emit(const AuthenState.error(
            'Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.'));
        return;
      }

      // ƒê·∫£m b·∫£o profile ƒë∆∞·ª£c t·∫°o
      try {
        await Future.delayed(const Duration(seconds: 1));
        await client
            .from('user_profiles')
            .select()
            .eq('id', user.id)
            .single()
            .timeout(const Duration(seconds: 5));
        print('‚úÖ Profile created successfully');
      } catch (e) {
        print('‚ö†Ô∏è Profile might not be created: $e');
      }

      if (user.emailConfirmedAt == null) {
        emit(const AuthenState.emailVerificationRequired());
      } else {
        final session = response.session;
        if (session != null) {
          await SessionManager.saveSession(session);

          // L∆∞u FCM token sau khi ƒëƒÉng k√Ω th√†nh c√¥ng
          await _saveFcmToken(user.id);

          emit(AuthenState.authenticated(user.id));
        } else {
          emit(const AuthenState.emailVerificationRequired());
        }
      }
    } on AuthException catch (e) {
      emit(AuthenState.error(_getLocalizedAuthError(e)));
    } catch (e) {
      print('‚ùå Registration error: $e');
      if (e.toString().contains('unexpected_failure') ||
          e.toString().contains('Database error')) {
        emit(const AuthenState.error(
            'L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.'));
      } else {
        emit(const AuthenState.error(
            'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.'));
      }
    }
  }

  /// ƒêƒÇNG NH·∫¨P B·∫∞NG EMAIL & PASSWORD
  Future<void> _onLogin(LoginEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      if (!_validateLoginData(event.email, event.password)) {
        emit(const AuthenState.error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.'));
        return;
      }

      final client = SupabaseConfig.client;
      final response = await client.auth.signInWithPassword(
        email: event.email.trim().toLowerCase(),
        password: event.password,
      );

      final session = response.session;
      final user = response.user;

      if (session != null && user != null) {
        if (user.emailConfirmedAt == null) {
          emit(const AuthenState.emailVerificationRequired());
        } else {
          await SessionManager.saveSession(session);

          // L∆∞u FCM token ngay sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
          await _saveFcmToken(user.id);

          // D·ªçn d·∫πp token c≈© (ch·∫°y background, kh√¥ng ch·ªù)
          _cleanupOldTokens(user.id);

          emit(AuthenState.authenticated(user.id));
        }
      } else {
        emit(const AuthenState.error('Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c.'));
      }
    } on AuthException catch (e) {
      emit(AuthenState.error(_getLocalizedAuthError(e)));
    } catch (e) {
      print('‚ùå Login error: $e');
      emit(const AuthenState.error(
          'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.'));
    }
  }

  /// ƒêƒÇNG NH·∫¨P B·∫∞NG GOOGLE
  Future<void> _loginWithGoogle(
      LoginWithGoogle event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      final googleSignIn = GoogleSignIn(
        serverClientId:
            "152762888438-1hpuulu1khn4iam4lt1m1uo5mtv87pbj.apps.googleusercontent.com",
      );

      final googleUser =
          await googleSignIn.signInSilently() ?? await googleSignIn.signIn();

      if (googleUser == null) {
        print("‚ö†Ô∏è Google user null - ng∆∞·ªùi d√πng h·ªßy ƒëƒÉng nh·∫≠p");
        emit(const AuthenState.unauthenticated());
        return;
      }

      final googleAuth = await googleUser.authentication;
      final accessToken = googleAuth.accessToken;
      final idToken = googleAuth.idToken;

      if (accessToken == null || idToken == null) {
        emit(const AuthenState.error('Kh√¥ng th·ªÉ l·∫•y token t·ª´ Google'));
        return;
      }

      final client = SupabaseConfig.client;
      final response = await client.auth.signInWithIdToken(
        provider: OAuthProvider.google,
        idToken: idToken,
        accessToken: accessToken,
      );

      final session = response.session;
      final user = response.user;

      if (session != null && user != null) {
        await SessionManager.saveSession(session);

        // T·∫°o profile n·∫øu ch∆∞a c√≥
        try {
          final profile = await client
              .from('user_profiles')
              .select()
              .eq('id', user.id)
              .maybeSingle()
              .timeout(const Duration(seconds: 3));

          if (profile == null) {
            await client.from('user_profiles').insert({
              'id': user.id,
              'email': user.email,
              'full_name': googleUser.displayName ?? user.email?.split('@')[0],
              'avatar_url': googleUser.photoUrl,
              'registration_source': 'google_oauth',
              'created_at': DateTime.now().toIso8601String(),
            });
          }
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi t·∫°o/ki·ªÉm tra profile: $e');
        }

        // L∆∞u FCM token sau khi ƒëƒÉng nh·∫≠p Google th√†nh c√¥ng
        await _saveFcmToken(user.id);

        // Cleanup token c≈©
        _cleanupOldTokens(user.id);

        emit(AuthenState.authenticated(user.id));
      } else {
        emit(const AuthenState.error('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i'));
      }
    } on AuthException catch (e) {
      emit(AuthenState.error(_getLocalizedAuthError(e)));
    } catch (e) {
      print('‚ùå Google login error: $e');
      emit(const AuthenState.error('C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p v·ªõi Google'));
    }
  }

  /// ƒêƒÇNG XU·∫§T
  Future<void> _onLogout(LogoutEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      final userId = SupabaseConfig.client.auth.currentUser?.id;

      // V√¥ hi·ªáu h√≥a FCM token tr∆∞·ªõc khi logout
      if (userId != null) {
        await _deactivateFcmToken(userId);
      }

      await SupabaseConfig.client.auth.signOut();
      await SessionManager.clearSession();

      emit(const AuthenState.unauthenticated());
    } catch (e) {
      print('‚ùå Logout error: $e');
      emit(const AuthenState.unauthenticated());
    }
  }

  /// KH√îI PH·ª§C SESSION
  Future<void> _onRestore(
      RestoreSessionEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      final client = SupabaseConfig.client;

      // Th·ª≠ refresh session
      try {
        final currentSession = client.auth.currentSession;
        if (currentSession != null) {
          final refreshResponse = await client.auth.refreshSession();
          if (refreshResponse.session != null) {
            await SessionManager.saveSession(refreshResponse.session!);
          }
        }
      } catch (e) {
        print("‚ö†Ô∏è Session refresh failed: $e");
      }

      final session = await SessionManager.restoreSession();

      if (session != null) {
        final user = client.auth.currentUser;

        if (user != null && !session.isExpired) {
          if (user.emailConfirmedAt != null) {
            // C·∫≠p nh·∫≠t FCM token khi restore session
            await _saveFcmToken(user.id);

            emit(AuthenState.authenticated(user.id));
          } else {
            emit(const AuthenState.emailVerificationRequired());
          }
        } else {
          await SessionManager.clearSession();
          await client.auth.signOut();
          emit(const AuthenState.unauthenticated());
        }
      } else {
        emit(const AuthenState.unauthenticated());
      }
    } catch (e) {
      print('‚ùå Session restore error: $e');
      await SessionManager.clearSession();
      await SupabaseConfig.client.auth.signOut();
      emit(const AuthenState.unauthenticated());
    }
  }

  /// KI·ªÇM TRA X√ÅC TH·ª∞C EMAIL
  Future<void> _onCheckEmailVerification(
      CheckEmailVerificationEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      final client = SupabaseConfig.client;
      final refreshResponse = await client.auth.refreshSession();

      if (refreshResponse.session != null && refreshResponse.user != null) {
        await SessionManager.saveSession(refreshResponse.session!);
        final user = refreshResponse.user!;

        if (user.emailConfirmedAt != null) {
          // L∆∞u FCM token sau khi verify email th√†nh c√¥ng
          await _saveFcmToken(user.id);

          emit(AuthenState.authenticated(user.id));
        } else {
          emit(const AuthenState.emailVerificationRequired());
        }
      } else {
        emit(const AuthenState.error("Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c"));
      }
    } catch (e) {
      print('‚ùå Check email verification error: $e');
      emit(const AuthenState.error("L·ªói ki·ªÉm tra x√°c th·ª±c"));
    }
  }

  /// X·ª¨ L√ù CALLBACK T·ª™ DEEP LINK
  Future<void> _onHandleAuthCallback(
      HandleAuthCallbackEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      final client = SupabaseConfig.client;
      final response = await client.auth.setSession(event.accessToken);

      if (response.session != null && response.user != null) {
        await SessionManager.saveSession(response.session!);

        if (response.user!.emailConfirmedAt != null) {
          // L∆∞u FCM token sau khi callback th√†nh c√¥ng
          await _saveFcmToken(response.user!.id);

          emit(AuthenState.authenticated(response.user!.id));
        } else {
          emit(const AuthenState.emailVerificationRequired());
        }
      } else {
        emit(const AuthenState.error(
            'Kh√¥ng th·ªÉ x√°c th·ª±c email. Vui l√≤ng th·ª≠ l·∫°i.'));
      }
    } catch (e) {
      print('‚ùå Auth callback error: $e');
      emit(AuthenState.error('L·ªói x√°c th·ª±c email: ${e.toString()}'));
    }
  }

  /// G·ª¨I L·∫†I EMAIL X√ÅC TH·ª∞C
  Future<void> _onResendVerification(
      ResendVerificationEvent event, Emitter<AuthenState> emit) async {
    try {
      final client = SupabaseConfig.client;

      await client.auth.resend(
        type: OtpType.signup,
        email: event.email,
        emailRedirectTo: 'ecommerceapp://auth/callback',
      );
    } on AuthException catch (e) {
      emit(AuthenState.error(_getLocalizedAuthError(e)));
    } catch (e) {
      print('‚ùå Resend verification error: $e');
      emit(const AuthenState.error('Kh√¥ng th·ªÉ g·ª≠i l·∫°i email x√°c th·ª±c.'));
    }
  }

  /// RESET M·∫¨T KH·∫®U
  Future<void> _onResetPassword(
      ResetPasswordEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      final client = SupabaseConfig.client;
      await client.auth.resetPasswordForEmail(
        event.email,
        redirectTo: 'ecommerceapp://auth/reset-password',
      );

      emit(const AuthenState.passwordResetSent());
    } on AuthException catch (e) {
      emit(AuthenState.error(_getLocalizedAuthError(e)));
    } catch (e) {
      print('‚ùå Reset password error: $e');
      emit(const AuthenState.error('Kh√¥ng th·ªÉ g·ª≠i email reset m·∫≠t kh·∫©u.'));
    }
  }

  /// C·∫¨P NH·∫¨T M·∫¨T KH·∫®U
  Future<void> _onUpdatePassword(
      UpdatePasswordEvent event, Emitter<AuthenState> emit) async {
    try {
      emit(const AuthenState.loading());

      final client = SupabaseConfig.client;
      final response = await client.auth.updateUser(
        UserAttributes(password: event.newPassword),
      );

      if (response.user != null) {
        emit(const AuthenState.passwordUpdated());
      } else {
        emit(const AuthenState.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.'));
      }
    } on AuthException catch (e) {
      emit(AuthenState.error(_getLocalizedAuthError(e)));
    } catch (e) {
      print('‚ùå Update password error: $e');
      emit(const AuthenState.error('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.'));
    }
  }

  // ==================== VALIDATION & ERROR HANDLING ====================

  bool _validateRegistrationData(String email, String password) {
    final emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+$');
    if (!emailRegex.hasMatch(email)) return false;
    if (password.length < 6) return false;
    return true;
  }

  bool _validateLoginData(String email, String password) {
    if (email.trim().isEmpty || password.isEmpty) return false;
    final emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+$');
    return emailRegex.hasMatch(email);
  }

  String _getLocalizedAuthError(AuthException e) {
    final message = e.message.toLowerCase();

    if (message.contains('email not confirmed') ||
        message.contains('email_not_confirmed')) {
      return 'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.';
    } else if (message.contains('invalid login credentials') ||
        message.contains('invalid_credentials')) {
      return 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.';
    } else if (message.contains('already registered') ||
        message.contains('already exists')) {
      return 'Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.';
    } else if (message.contains('invalid email')) {
      return 'Email kh√¥ng h·ª£p l·ªá.';
    } else if (message.contains('password')) {
      if (message.contains('too short'))
        return 'M·∫≠t kh·∫©u qu√° ng·∫Øn (t·ªëi thi·ªÉu 6 k√Ω t·ª±).';
      return 'M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.';
    } else if (message.contains('too many requests') ||
        message.contains('rate limit')) {
      return 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ƒë·ª£i m·ªôt l√∫c.';
    } else if (message.contains('network') || message.contains('connection')) {
      return 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet.';
    } else if (message.contains('user not found')) {
      return 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y.';
    } else if (message.contains('token')) {
      return 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
    } else if (message.contains('google') || message.contains('oauth')) {
      if (message.contains('cancelled') || message.contains('user_cancelled')) {
        return 'ƒêƒÉng nh·∫≠p Google ƒë√£ b·ªã h·ªßy';
      } else if (message.contains('invalid_token')) {
        return 'Token Google kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.';
      } else if (message.contains('configuration')) {
        return 'C·∫•u h√¨nh Google OAuth ch∆∞a ƒë√∫ng.';
      }
      return 'L·ªói ƒëƒÉng nh·∫≠p Google. Vui l√≤ng th·ª≠ l·∫°i.';
    }

    return e.message.isNotEmpty
        ? e.message
        : 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.';
  }

  // ==================== UTILITY METHODS ====================

  bool get isAuthenticated => state.status == AuthStatus.authenticated;
  bool get isLoading => state.status == AuthStatus.loading;
  String? get currentUserId => state.userId;

  /// Refresh token n·∫øu c·∫ßn
  Future<void> refreshTokenIfNeeded() async {
    try {
      final session = SupabaseConfig.client.auth.currentSession;
      if (session != null && session.isExpired) {
        final response = await SupabaseConfig.client.auth.refreshSession();
        if (response.session != null) {
          await SessionManager.saveSession(response.session!);
        }
      }
    } catch (e) {
      print('‚ùå Token refresh error: $e');
      add(LogoutEvent());
    }
  }

  /// C·∫≠p nh·∫≠t FCM token th·ªß c√¥ng (v√≠ d·ª•: khi token refresh)
  Future<void> updateFcmToken() async {
    try {
      final userId = SupabaseConfig.client.auth.currentUser?.id;
      if (userId != null) {
        await _saveFcmToken(userId);
      }
    } catch (e) {
      print('‚ùå Update FCM token error: $e');
    }
  }

  @override
  Future<void> close() async {
    return super.close();
  }
}
